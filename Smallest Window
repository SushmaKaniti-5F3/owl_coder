Given a string S consisting of the characters 0, 1 and 2. 
Your task is to find the length of the smallest substring of string S that contains all the three characters 0, 1 and 2. 
If no such substring exists, then return -1.

Input:
S = "01212"

Output:
3

Explanation:
The substring 012 is the smallest substring that contains the characters 0, 1 and 2.

Input:
S = "12121"

Output:
-1

Explanation:
As the character 0 is not present in the string S, therefor no substring containing all the three characters 0, 1 and 2 exists. 
Hence, the answer is -1 in this case.
---------------------------------------------------------------------------------------------------------------


#include<bits/stdc++.h>
using namespace std;
int smallestSubstring(string S)
{
    int res=INT_MAX;
    bool zero=false,one=false,two=false;
    int zeroindex,oneindex,twoindex,j=0;
    for(int i=0;i<S.length();i++)
    {
        if(S[i]=='0')
        {
            zero=true;
            zeroindex=j;
        }
        else if(S[i]=='1')
        {
            one=true;
            oneindex=j;
        }
        else if(S[i]=='2')
        {
            two=true;
            twoindex=j;
        }
        if(zero and one and two)
        res=min(res,max({zeroindex,oneindex,twoindex})-min({zeroindex,oneindex,twoindex}));
        j++;
    }
    if(res==INT_MAX)
    return -1;
    return res+1;
}
int main()
{
    string S;
    cin>>S;
    cout<<smallestSubstring(S);
    return 0;
}
